{"version":3,"sources":["App.jsx","index.js"],"names":["App","props","parseData","api","dataset","totalCases","forEach","covidState","obj","state","listOfStates","undefined","stateName","name","population","date","lastUpdateEt","cleanDate","moment","format","newCases","positiveIncrease","newTests","totalTestResultsIncrease","positive","popPerMil","toFixed","newPerMil","totPerMil","push","console","log","headerStyle","formatter","cell","toString","replace","numberSort","a","b","order","parseInt","mdbTable","columns","text","dataField","sort","style","sortFunc","rows","setState","fetch","apiData","json","this","Fragment","length","keyField","data","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+QAmNeA,E,kDA1Mb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqBRC,UAAa,SAACC,GACZ,IAAMC,EAAU,GACZC,EAAa,EAEjBF,EAAIG,SAAQ,SAACC,GACX,IAAMC,EAAM,GACNC,EAAQC,EAAaH,EAAWE,OAEtC,QAAcE,IAAVF,GAAiC,OAAVA,EAAgB,CACzCD,EAAIC,MAAQF,EAAWE,MACvBD,EAAII,UAAYH,EAAMI,KACtBL,EAAIM,WAAaL,EAAMK,WAEvBN,EAAIO,KAAOR,EAAWS,aACtBR,EAAIS,UAAYC,IAAOX,EAAWS,aAAc,oBAAoBG,OAAO,UAC3EX,EAAIY,SAAWb,EAAWc,iBAC1Bb,EAAIc,SAAWf,EAAWgB,yBAC1Bf,EAAIH,WAAaE,EAAWiB,SAE5B,IAAMC,GAAahB,EAAMK,WAAa,KAASY,QAAQ,GACjDC,GAAapB,EAAWc,iBAAmBI,GAAWC,QAAQ,GAC9DE,GAAarB,EAAWiB,SAAWC,GAAWC,QAAQ,GAE5DlB,EAAImB,UAAYA,EAChBnB,EAAIoB,UAAYA,EAEhBvB,GAAcG,EAAIY,SAClBhB,EAAQyB,KAAKrB,QAEbsB,QAAQC,IAAI,sBAAwBxB,EAAWE,UAOnD,IAAMuB,EAAc,CAClB,WAAc,QAGVC,EAAY,SAACC,GACjB,OAAOA,EAAKC,WAAWC,QAAQ,wBAAyB,MAGpDC,EAAa,SAACC,EAAGC,EAAGC,GACxB,MAAc,QAAVA,EACKC,SAASF,GAAKE,SAASH,GAGzBG,SAASH,GAAKG,SAASF,IAG1BG,EAAW,CACfC,QAAS,CACP,CACEC,KAAM,QACNC,UAAW,YACXC,MAAM,EACNC,MAAOf,EACPA,eAEF,CACEY,KAAM,eACNC,UAAW,YACXb,eAEF,CACEY,KAAM,YACNC,UAAW,WACXC,MAAM,EACNE,SAAU,SAACV,EAAGC,EAAGC,GAAP,OAAiBH,EAAWC,EAAGC,EAAGC,IAC5CR,cACAC,aAEF,CACEW,KAAM,cACNC,UAAW,aACXC,MAAM,EACNE,SAAU,SAACV,EAAGC,EAAGC,GAAP,OAAiBH,EAAWC,EAAGC,EAAGC,IAC5CR,cACAC,aAEF,CACEW,KAAM,0BACNC,UAAW,YACXC,MAAM,EACNE,SAAU,SAACV,EAAGC,EAAGC,GAAP,OAAiBH,EAAWC,EAAGC,EAAGC,IAC5CR,cACAC,aAEF,CACEW,KAAM,4BACNC,UAAW,YACXC,MAAM,EACNE,SAAU,SAACV,EAAGC,EAAGC,GAAP,OAAiBH,EAAWC,EAAGC,EAAGC,IAC5CR,cACAC,aAEF,CACEW,KAAM,aACNC,UAAW,aACXC,MAAM,EACNE,SAAU,SAACV,EAAGC,EAAGC,GAAP,OAAiBH,EAAWC,EAAGC,EAAGC,IAC5CR,cACAC,cAGJgB,KAAM7C,GAGR,EAAK8C,SAAS,CACZ9C,UACAsC,WACArC,gBApIF,EAAKI,MAAQ,CACXL,QAAS,GACTsC,SAAU,MALK,E,yMAaCS,MAAM,wD,OAAtBC,E,sDAEAtB,QAAQC,IAAR,M,wBAGcqB,EAAQC,O,QAAxBD,E,OACAE,KAAKpD,UAAUkD,G,8IAyHf,OACE,eAAC,IAAMG,SAAP,WACE,iCACE,gEAEF,oCACiC,IAA9BD,KAAK7C,MAAML,QAAQoD,QAClB,8BACE,mEAIHF,KAAK7C,MAAML,QAAQoD,OAAS,IAAK,EAkCT,OAAxBF,KAAK7C,MAAMiC,WAAqB,EAIR,OAAxBY,KAAK7C,MAAMiC,UACV,oDACoBY,KAAK7C,MAAMJ,WAC7B,cAAC,IAAD,CAAgBoD,SAAS,YAAYC,KAAOJ,KAAK7C,MAAMiC,SAASO,KAAON,QAAUW,KAAK7C,MAAMiC,SAASC,uB,GAlMjGgB,IAAMC,W,cCFxBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.25b2be34.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport { Table} from \"react-bootstrap\";\nimport { MDBDataTable } from 'mdbreact';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport listOfStates from \"./utils/states.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataset: [],\n      mdbTable: null\n    };\n  }\n\n  async componentDidMount() {\n    let apiData;\n    \n    try {\n      apiData = await fetch(\"https://api.covidtracking.com/v1/states/current.json\");\n    } catch (e) {\n      console.log(e);\n    }\n\n    apiData = await apiData.json();\n    this.parseData(apiData);\n  }\n\n  parseData = ((api) => {\n    const dataset = [];\n    let totalCases = 0;\n\n    api.forEach((covidState) => {\n      const obj = {};\n      const state = listOfStates[covidState.state];\n\n      if (state !== undefined && state !== null) {\n        obj.state = covidState.state;\n        obj.stateName = state.name;\n        obj.population = state.population;\n        \n        obj.date = covidState.lastUpdateEt;\n        obj.cleanDate = moment(covidState.lastUpdateEt, \"MM/DD/YYYY HH:mm\").format(\"MMM Do\");\n        obj.newCases = covidState.positiveIncrease;\n        obj.newTests = covidState.totalTestResultsIncrease;\n        obj.totalCases = covidState.positive;\n\n        const popPerMil = (state.population / 1000000).toFixed(0);\n        const newPerMil = (covidState.positiveIncrease / popPerMil).toFixed(0);\n        const totPerMil = (covidState.positive / popPerMil).toFixed(0);\n\n        obj.newPerMil = newPerMil;\n        obj.totPerMil = totPerMil;\n        \n        totalCases += obj.newCases;\n        dataset.push(obj);\n      } else {\n        console.log(\"No State info for: \" + covidState.state);\n      }\n      \n    });\n\n\n    // Generate Table thingy\n    const headerStyle = {\n      \"fontWeight\": \"bold\"\n    };\n\n    const formatter = (cell) => {\n      return cell.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); \n    }\n\n    const numberSort = (a, b, order) => {\n      if (order === \"asc\") {\n        return parseInt(b) - parseInt(a);\n      }\n\n      return parseInt(a) - parseInt(b);\n    };\n\n    const mdbTable = {\n      columns: [\n        {\n          text: \"State\",\n          dataField: \"stateName\",\n          sort: true,\n          style: headerStyle,\n          headerStyle\n        },\n        {\n          text: \"Last Updated\",\n          dataField: \"cleanDate\",\n          headerStyle\n        },\n        {\n          text: \"New Cases\",\n          dataField: \"newCases\",\n          sort: true,\n          sortFunc: (a, b, order) => numberSort(a, b, order),\n          headerStyle,\n          formatter\n        },\n        {\n          text: \"Total Cases\",\n          dataField: \"totalCases\",\n          sort: true,\n          sortFunc: (a, b, order) => numberSort(a, b, order),\n          headerStyle,\n          formatter\n        },\n        {\n          text: \"New Cases per 1 Million\",\n          dataField: \"newPerMil\",\n          sort: true,\n          sortFunc: (a, b, order) => numberSort(a, b, order),\n          headerStyle,\n          formatter\n        },\n        {\n          text: \"Total Cases per 1 Million\",\n          dataField: \"totPerMil\",\n          sort: true,\n          sortFunc: (a, b, order) => numberSort(a, b, order),\n          headerStyle,\n          formatter\n        },\n        {\n          text: \"Population\",\n          dataField: \"population\",\n          sort: true,\n          sortFunc: (a, b, order) => numberSort(a, b, order),\n          headerStyle,\n          formatter\n        }\n      ],\n      rows: dataset\n    };\n\n    this.setState({\n      dataset,\n      mdbTable,\n      totalCases\n    });\n  });\n\n  render() {\n    return(\n      <React.Fragment>\n        <header>\n          <h1>Some interesting COVID stats</h1>\n        </header>\n        <section>\n          {this.state.dataset.length === 0 && (\n            <div>\n              <h3>Crunching the latest numbers...</h3>\n            </div>\n          )}\n\n          {this.state.dataset.length > 0 && 1 == 2 && (\n            <div>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>State</th>\n                    <th>Lastest Update</th>\n                    <th>New Cases</th>\n                    <th>Total Cases</th>\n                    <th>New Cases per 1 Million</th>\n                    <th>Total Cases per 1 Million</th>\n                    <th>Population</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.dataset.map((row, index) => {\n\n                    return (\n                      <tr key={index}>\n                        <td>{row.stateName}</td>\n                        <td>{row.cleanDate}</td>\n                        <td>{row.newCases}</td>\n                        <td>{row.totalCases}</td>\n                        <td>{row.newPerMil}</td>\n                        <td>{row.totPerMil}</td>\n                        <td>{row.population}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </div>\n          )}\n\n          {this.state.mdbTable !== null && 1 == 2 && (\n            <MDBDataTable striped bordered hover sortable paging={false} data={this.state.mdbTable} />\n          )}\n\n          {this.state.mdbTable !== null && (\n            <div>\n              New Cases Today: {this.state.totalCases}\n              <BootstrapTable keyField='stateName' data={ this.state.mdbTable.rows } columns={ this.state.mdbTable.columns } />\n            </div>\n          )}\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}